dbeaver
윈도우 -> 설정 ->연결 -> 연결 유형 -> Auto-commit by default 해제

이진 트리

SQL 주석 --

1. 트랜잭션
 	ROLLBACK -> SQL 실행 취소
	COMMIT -> 영구 반영
2. 세션
	데이터 베이스 접속 -> 1개 세션

3.LOCK


데이터 정의어
1. 자료형
	문자
		CHAR - 고정 길이 문자
			-CHAR(30)
				-30바이트로 고정된 문자
				KR, JP, CN.....

		VARCHAR2
			-Vairable Character
			VARCHAR2(30)
				KR -> 2바이트

		NVARCHAR2
		
		CLOB -> Character Large Object

	숫자
		NUMBER(전체 자리수, 소수점 자리수)
		NUMBER(6,2)
 		->	정수부분 4자리, 소수부분 2자리

	날짜
		DATE

2.CREATE
	CREATE TABLE 테이블 명 (
	   컬럼명 자료형 [제약조건],
	   컬럼명 자료형 [제약조건],
	   ...
	);
EX)

CREATE TABLE EMP_DDL(
	EMPNO NUMBER(4),
	ENAME VARCHAR(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO NUMBER(2)
);

3.ALTER
	테이블의 정의 변경
	ALTER TABLE
	
		ADD 추가

		RENAME COLUMN -> 컬럼명 변경

		MODIFY 자료형, 제약조건 변경

		DROP COLUMN 삭제

4.RENAME
	테이블 명 변경
	RENAME 기존 테이블명 TO 변경할 테이블명;

5. TRUNCATE - DDL
	테이블 데이터 비우기
	-실행과 동시에 COMMIT(반영)

	DELETE - DML
	-> COMMIT 반영

6. DROP
	DROP TABLE 테이블명;


객체 종류

사용자 테이블

데이터 사전 테이블
	-정보


1.데이터 사전
	목록 DICTIONARY

2.인덱스
	INDEX - 목차
	
	생성
	CREATE INDEX 인덱스 명
		ON 테이블 이름(컬럼명 [ASC - 기본값| DESC],
				컬럼명 [ASC - 기본값| DESC],
				...);
				
	ASC - Asending Order : 오름차순
	DESC - Dsending Order : 내림차순

	USER_INDEXES : 생성된 인덱스 목록
	USER_IND_COLUMNS : 인덱스 컬럼

	삭제
	DROP INDEX 인덱스명;


3.뷰 (View)
가상의 테이블
여러 산개된 데이터들 중 필요한 데이터만 추출하여 가상 테이블로 제공

뷰 생성
CREATE VIEW

EX)
CREATE VIEW VW_EMP20
AS (SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP WHERE DEPTNO=20);

뷰 수정
CREATE OR REPLACE VIEW 이름
(있으면 이름을 바꾸고, 없으면 만든다)

뷰 삭제
DROP VIEW 뷰이름;


4.ROWNUM
	-> 행 번호
	오라클에만 있음, 가상의 컬럼, 자동추가(구간범위 사용불가)
	-> 페이지
	-> 이하 검색 (<=) 조회가능
	-> 범위검색 x
	-> 인라인뷰 o -> 범위검색O

	SELECT E2.* FROM (SELECT ROWNUM num, E.* FROM EMP E) E2
	WHERE num > 3 AND num < 7;
	(가상의 뷰를 만들고, 하나 더 만들어서 가상의 뷰를 이용해 특정 값 범위검색을 사용함)

	별칭 AS(Alias)
	테이블, 컬럼명
EX)
	SELECT E.* FROM EMP E;

	SELECT E.ENAME FROM (SELECT EMPNO, ENAME, JOB FROM EMP WHERE DEPTNO = 30) E;
	(맨 뒤에서 E를 별칭으로 지정하고, E.ENAME을 지정해서 ENAME만 추출)

	WITH E AS (SELECT * FROM EMP WHERE DEPTNO = 30)
	SELECT * FROM E;

5.인라인뷰(서브 쿼리, WITH절)

6.시퀀스
	증감번호 -> 객체 SEQUENCE
	
	생성
	CREATE SEQUENCE 시퀀스 이름; -> 1씩 증감, 무한대

	CREATE SEQUENCE 시퀀스 이름
		[INCREMENT BY 수치]  -  수치만큼 증감
		[START WITH 시작번호]
		[MAXVALUE 최대값]
		[MINVALUE 최소값]
		[CYCLE | NOCYCLE] - CYCLE - 최대값에 도달하면 다시 최소값부터 시작
		[CACHE 수치 | NOCACHE] - 기본값은 CACHE 20

	시퀀스명
		CURRVAL - 현재 번호
		NEXTVAL - 다음 번호

EX) CREATE SEQUENCE SEQ_DEPT_SEQUENCE
	INCREMENT BY 10
	START WITH 10
	MAXVALUE 90
	MINVALUE 10
	NOCYCLE;
(10부터 시작, 10씩 증감하는 시퀀스, 90까지, 반복X)


	시퀀스 변경
	ALTER SEQUENCE 시퀀스명;

	시퀀스 삭제
	DROP SEQUENCE 시퀀스명;

	DUAL -> 가상의 임시 테이블 -> 값만 확인

	SELECT SEQ_DEPT_SEQUENCE.CURRVAL, SEQ_DEPT_SEQUENCE.NEXTVAL FROM DUAL;
	(현재값, 다음값을 선택하여 보여줌)

7.동의어

값 넣기
INSERT INTO TABLE_DEFAULT(LOGIN_ID, LOGIN_PWD, TEL)
VALUES ('ID', 'PWD', '010-1111-1111');


테이블 이름이 너무 길 때, 짧은 이름을 하나 만들어주기 위해서 사용

1)동의어 생성 (생성하기 전 생성권한 필요)
GRANT CREATE SYNONYM TO SCOTT;
GRANT CREATE PUBLIC SYNONYM TO SCOTT;


CREATE SYNONYM

제약조건 (테이블의 특정 열에 지정할 수 있음)

기본키 - 테이블의 각 행의 데이터를 대표할 수 있는 컬럼, 컬럼 조합

후보키 - 기본키가 될 수 있는 후보 컬럼, 컬럼 조합
기본키 (PRIMARY KEY, UNIQUE + NOT NULL)
대리키 (기본키 - 증감번호 같은 형식으로 대리)


외래키 (FOREIGN KEY)
SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; ( 같은 값을 이용해서 테이블 2개를 묶어서 표시)

CREATE TABLE EMP_FK(
	EMPNO NUMBER(4) CONSTRAINTS EF_PK PRIMARY KEY,
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO CONSTRAINTS EF_PK_DEPTNO_FK REFERENCES DEPT_PK (DEPTNO)
);

자식키가 있으면 삭제를 할 수 없다. (CASCADE 이용하면 가능)

ALTER TABLE EMP_FK MODIFY DEPTNO
CONSTRAINTS EF_DEPTNO_FK REFERENCES DEPT_PK(DEPTNO) ON DELETE CASCADE;	

데이터 무결성

1.영역 무결성
2.개체 무결성
3.참조 무결성

CREATE TABLE 테이블명 (
	컬럼명 자료형 [제약조건]
);

CREATE TABLE TABLE_NOTNULL (
	LOGIN_ID VARCHAR2(20) CONSTRAINT TNL_LOGINID_NN NOT NULL,
	LOGIN_PWD VARCHAR2(20) CONSTRAINT TNL_LOGINPWD_NN NOT NULL,
	TEL VARCHAR2(20)
);

CREATE TABLE TABLE_PK(
	LOGIN_ID VARCHAR2(20),
	LOGIN_PWD VARCHAR2(20) CONSTRAINTS TP_LOGIN_PWD_NN NOT NULL,
	TEL VARCHAR2(2),
	CONSTRAINTS TP_LOGIN_ID_PK PRIMARY KEY(LOGIN_ID)
);



CONSTRAINTS TNL_LOGINID_NN NOT NULL 부분은 제약 조건에 이름을 붙인 후 제약

제약조건 찾기
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='EMP_FK';

제약조건 변경
ALTER TABLE 테이블명 MODIFY 컬럼명 [자료형] [제약조건]

제약조건 삭제
ALTER TABLE 테이블명 DROP CONSTRAINTS 제약조건명;

제약조건 이름 변경
ALTER TABLE 테이블명 RENAME 기존 명칭 TO 새로운 명칭;
ALTER TABLE TABLE_NOTNULL RENAME CONSTRAINTS TNL_LOGINID_NN TO TNL_LOGINID_NN2

1. NOT NULL
NULL값을 허용하지 않음, NULL 제외 데이터는 중복 허용
-필수 항목
 
2. UNIQUE (기본키, 대리키)
유일한 값을 가져야함. 중복X, NULL은 중복허용
(여러개 지정 가능)

3. PRIMARY KEY
유일값이면서 NULL값을 허용하지 않음
(UNIQUE + NOT NULL - 단 하나의 기본키만 존재)

4. FOREIGN KEY

CONSTRAINTS 제약조건명 REFERENCES 테이블명(컬럼명 - PK)

기본 설정 - 부모 데이터 자식 데이터가 있으면 삭제불가
	ON DELETE CASCADE : 연쇄 삭제
		-부모 데이터에 자식 데이터가 있으면 함께 삭제

	ON DELETE SET NULL
		-부모 데이터에 자식 데이터가 있으면
		 자식 데이터에 NULL로 대체


5. CHECK
	-LENGTH - 글자 수
	  한글A - 3
	-LENGTHB - 바이트 수
	  한글A - 5

	CREATE TABLE TABLE_CHECK(
	LOGIN_ID VARCHAR2(20) CONSTRAINTS TC_PK PRIMARY KEY,
	LOGIN_PWD VARCHAR2(20) CONSTRAINTS TC_LOGIN_PWD_NN NOT NULL 
				CONSTRAINTS TC_LOGIN_PWD_CK CHECK(LENGTH(LOGIN_PWD) >= 8),
							TEL VARCHAR2(20)
);



6. DEFAULT
기본값을 넣어줌

CREATE TABLE TABLE_DEFAULT (
	LOGIN_ID VARCHAR2(20) CONSTRAINTS TD_PK PRIMARY KEY,
	LOGIN_PWD VARCHAR2(20) CONSTRAINTS TD_LOGIN_PWD_NN NOT NULL,
	TEL VARCHAR2(20),
	REGDT DATE DEFAULT SYSDATE
);



	


