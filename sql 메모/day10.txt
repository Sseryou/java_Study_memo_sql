SELECT문의 기본 형식
0.DESCRIBE 테이블명;
	-테이블 명세

1. 데이터를 조회하는 3가지 방법
- 조회

- 셀렉션 : 조회된 행
- 프로젝션 : 조회된 컬럼
- 조인 : 테이블간 연결

SELECT 컬럼명,,


SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; 
(EMP와 DEPT의 공통된 값인 DEPTNO를 이용하여 연결후 검색)

ALL - 기본값
DISTINCT - 중복 없는 값

SELECT [ALL | DISTINCT] 컬럼명...FROM 테이블명;
ALL 기본값 - 모든 데이터
DISTINCT - 중복을 제외한 데이터

SELECT DISTINCT JOB, MGR FROM EMP;


SELECT ENAME, JOB, SAL * 12 + COMM FROM EMP;

검색을 하면서 SAL 값에 연산을 실행한다....

SELECT ENAME, JOB, SAL * 12 + COMM 연봉 FROM EMP;

검색을 하면서 테이블 이름을 수정해서 보여준다...

SELECT ENAME, JOB, (SAL * 12 + COMM) AS "1년 연봉" FROM EMP;

띄어쓰기 있으면 쌍따음표 붙여야한다...



2. 별칭을 지정하는 방법

AS(Alias) -생략 가능

SELECT * FROM EMP, DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO; 

SELECT EMP.EMPNO, EMP.ENAME, EMP.JOB, D.* 
FROM EMP E, DEPT D WHERE E.DEPTNO = D.DEPTNO; 


3. 원하는 순서로 출력 데이터를 정렬하는 ORDER BY

SELECT * FROM EMP ORDER BY HIREDATE ASC;
SELECT * FROM EMP ORDER BY SAL DESC;

SELECT * FROM EMP ORDER BY SAL, HIREDATE; (2차정렬)

정렬
컬럼별 정렬

ORDER BY 컬럼명 [ASC - 기본값|DESC], 컬럼명 [ASC | DESC], 컬럼명.....

ASC - 오름차순
DESC - 내림차순


4.더 정확하고 다양하게 결과를 출력하는 WHERE절과 연산자

1) 문법

SELECT 컬럼명, ... FROM 테이블명 WHERE 조건식;

2) 여러 개 조건식을 사용하는 AND, OR 연산자

연산자
	산술연산자
	(+, -, /, *, ... MOD - 나머지 연산자)
	비교연산자
	<, <=, >, >=, = (같다)
	다르다
	!=
	<>
	^=


	NULL은 연산 X
	
	숫자 + NULL -> NULL

	NVL(컬럼명, NULL일때 대체값)

	비교연산 X, NULL 값 조회 X

	IS NULL -> 컬럼이 NULL인지 체크
	SELECT * FROM EMP WHERE COMM IS NULL;
	SELECT * FROM EMP WHERE COMM IS NULL OR COMM <> '';
	
	

	SELECT 100 * NVL(NULL, 0) FROM DUAL;
	
	SELECT ENAME, JOB, SAL * 12 + NVL(COMM, 0) 연봉 FROM EMP;


	SELECT ENAME, JOB, SAL * 12 + NVL(COMM, 0) 연봉 FROM EMP
	WHERE SAL * 12 + NVL(COMM, 0) >= 30000;

	SELECT ENAME, JOB, SAL * 12 + NVL(COMM, 0) 연봉 FROM EMP
	WHERE SAL * 12 + NVL(COMM, 0) ^= 36000;

	논리연산자

	AND
		비교하는 항이 모두 참일때 참인 조건

		SAL가 2500불 이상(SAL >= 2500), 3500 이하(SAL <= 3500)

		SELECT * FROM EMP
		WHERE SAL >= 2500 AND SAL <= 3500;

	OR
		비교하는 항이 둘중 하나만 참이어도 참인 조건
		JOB - SALESMAN, CLERK

		( ... ) : 우선순위가 가장 높은 연산 (AND와 OR을 같이 쓸때 OR에 활용)
		SELECT * FROM EMP
		WHERE (JOB = 'SALESMAN' OR JOB = 'CLERK') AND SAL >= 1500;
		
	NOT
		참인 조건 -> 거짓인 조건
		거짓인 조건 -> 참인 조건
		
		SAL가 2500 미만
		
		SELECT * FROM EMP
		WHERE SAL >= 2500; (2500 이상)

		SELECT * FROM EMP
		WHERE NOT SAL >= 2500;

		NULL 이 아닌 조건
		IS NOT NULL

		SELECT * FROM EMP
		WHERE COMM IS NOT NULL;
	
	IN 연산자 : 교집합
		
		컬럼 IN(항목1, 항목2, 항목3, ...) -> 컬럼이 항목 1, 2, 3인 값이 참인 조건

		SELECT * FROM EMP
		WHERE JOB = 'SALESMAN' OR JOB = ' CLERK' OR JOB = 'MANAGER'; (비효율적)

		SELECT * FROM EMP
		WHERE JOB IN ('SALESMAN', 'CLERK', 'MANAGER');

	NOT IN : 차집합


	자료형 -> 자동 형변환(안되는 형식도 있다)

		TO_DATE
			-문자열 날짜, 형식에 따라서 날짜 자료형으로 변환
			- Y - 년도(YY, YYYY) - 81 - YY -> 2081 (2000년 기준)
			- R - 년도(RR, RRRR) - 81 - RR -> 1981
			- MM - 월
			- DD - 일

			- HH, HH12, HH24

		SELECT * FROM EMP
		WHERE HIREDATE
		BETWEEN TO_DATE('01/01/81', 'MM/DD/RR')
				AND TO_DATE('01/01/83', 'MM/DD/RR');

		TO_NUMBER
		TO_CHAR

		
	LIKE 연산자
		패턴으로 검색
	
		컬럼명 LIKE 패턴;
			-패턴과 일치하는 값
			SELECT * FROM EMP WHERE JOB LIKE 'CLERK';

			-%(와일드카드)
			- '패턴%' -> 패턴으로 시작하는 컬럼 값
			SELECT * FROM EMP WHERE JOB LIKE 'S%'; (S로 시작하는 컬럼값을 전부 검색)
			- '%패턴' -> 패턴으로 끝나는 컬럼 값
			SELECT * FROM EMP WHERE JOB LIKE '%MAN'; (MAN으로 끝나는 컬럼값을 전부검색)
			- '%패턴%' ->패턴이 중간에 포함된 컬럼 값
			

			- _(와일드카드) -> 문자 1개
			
			- '_L%' L앞에 1글자가 있고 시작하는 컬럼값
			SELECT * FROM EMP WHERE JOB LIKE '_L%';
			- '__L%' L앞에 2글자가 있고 시작하는 컬럼값
			SELECT * FROM EMP WHERE JOB LIKE '__L%';

			-
				_,% -> 기능 O, 문자로 사용하려면 ESCAPE ->
			SELECT * FROM DEPT_SEQ
			WHERE DNAME LIKE '\%_' ESCAPE '\' (%가 문자임을 명시)

3) 연산자 종류와 활용 방법

4) 집합 연산자
	-중복 X

	합집합
	UNION
	UNION ALL

	A - 1,2,3,4,5
	B - 3,4,5,6,7

	A와 B의 합집합 - {1,2,3,4,5,6,7}

	SELECT EMPNO, ENAME FROM EMP WHERE SAL < 2500
	UNION ALL
	SELECT EMPNO, ENAME, FROM EMP WHERE SAL >= 2000;
	값의 갯수, 열의 이름이 같아야함
	

	교집합
	INTERSECT , IN

	SELECT * FROM EMP WHERE SAL < 2500 AND EMPNO
	IN (SELECT EMPNO FROM EMP WHERE SAL >= 2000);

	차집합
	MINUS , NOT IN

	SELECT * FROM EMP WHERE SAL < 2500 AND EMPNO
	NOT IN (SELECT EMPNO FROM EMP WHERE SAL >= 2000);

	BETWEEN A AND B 
	A이상 B이하
	
	SELECT * FROM EMP
	WHERE SAL BETWEEN 2500 AND 3500;

데이터 처리와 가공을 위한 오라클 함수
내장함수


사용자 정의 함수


1. 내장 함수의 종류
- 단일행 함수
	- 값이 단일값
	- 스칼라 값

문자
	UPPER : 소문자 -> 대문자

	SELECT * FROM EMP WHERE UPPER(ENAME)=UPPER('scott');

	LOWER : 대문자 -> 소문자
	INITCAP : 첫글자만 대문자

	LENGTH : 문자의 길이
	
	SELECT * FROM EMP WHERE LENGTH(ENAME) = 5;(문자 길이가 5 이상인 ENAME만 출력)	

	LENGTBY : 바이트 길이

	SELECT LENGTHB('가나AB') FROM DUAL;


//ORACLE, MSSQL
	

	//MYSQL
		//LENGTH : 바이트 길이
		//CHAR_LENGTH : 문자의 길이


	SUBSTR : 문자열 추출
	SUBSTR(문자열, 시작위치) : 시작위치부터 문자열 추출
	SUBSTR(문자열, 시작위치, 추출갯수)
			:시작 위치에서 추출 갯수만큼 추출

	SELECT SUBSTR(ENAME, 1, 3) FROM EMP; (EMP에서 ENAME의 첫글자부터 3번째 글자까지 추출)

	SELECT SUBSTR(ENAME, -LENGTH(ENAME), 1) FROM EMP WHERE ENAME='SCOTT';
	(EMP 안의 SCOTT에서 -5번째(LENGTH(ENAME)은 5지만, 부호 연산자로 -로 바꿈. 따라서 -5번째부터 시작)부터 1만큼 추출)
		

	시작위치는 1부터

	1
          -5 -4 -3 -2 -1
	SCOTT
           1 2 3 4 5

	- : 부호 연산자 ( * -1)
		음수 -> 양수
		양수 -> 음수

	INSTR -> 문자열의 위치
	        -> 문자열을 못찾을 때는 0을 반환

	SELECT INSTR('APPLE, ORANGE, MELON', 'ORANGE') FROM DUAL; = 8 (공백도 문자열 포함)

	--이름에 L이 포함되어 있는 직원
	SELECT * FROM EMP WHERE INSTR(ENAME, 'L') > 0; 


	REPLACE : 치환
	REPLACE(문자열, 찾는 문자열, 교체될 문자열)

	010-1234-1234
	SELECT REPLACE ('010-1234-1234', '-', '.' )FROM DUAL;
	010.1234.1234


	LPAD - LEFT PAD
		10 -> 0010
		1 -> 0001

	LPAD(문자열, 자리수, 채울 문자)
	SELECT LPAD('10', 5, '*') FROM DUAL; 
	***10

	RPAD - RIGHT PAD

	RPAD(문자열, 자리수, 채울 문자)

	
	CONCAT - 문자열 결합

	SELECT CONCAT(CONCAT(JOB, ' : '), ENAME) "부서명 : 직원명" FROM EMP; (이중 CONCAT)

	|| -> 문자열 결합 연산자 (ORACLE만)
	
	SELECT JOB || ' : ' || ENAME "부서명 : 직원명" FROM EMP;

	
	SELECT * FROM EMP
	WHERE ENAME || JOB LIKE '%N';



//	String, Array
//	indexOf
//		-특정 문자열이 있는지 체크 (0부터 시작)
//		- -1

숫자

날짜

기타

- 다중행 함수






	
	