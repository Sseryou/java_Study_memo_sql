사용자 계정 추가 (SYSTEM 계정, CREATE USER 적절한 권한 가진 사용자)
권한부여 -> WITH ADMIN OPTION

1. 데이터베이스

2. CONNECT, RESOURCE



CREATE SEQUENCE 시퀀스명; //1부터 시작, 1씩 증감,
	-숫자
	
	-영역(도메인) 무결성 제약조건
	(자료형 - NUMBER)


CREATE SEQUENCE 시퀀스명
	INCREMENT BY 수치
	START WITH 수치
	MINVALUE
	MAXVALUE
	CYCLE/NOCYCLE - 기본값
	CACHE 수치 | NOCACHE - CACHE 20

	MINVALUE - 10
	MAXVALUE - 90

시퀀스 객체
CURRVAL - 현재 값(수치 증가 X)
NEXTVAL - 현재값 -> 수치 증가
	-> 호출 할때마다 수치증가




날짜 데이터를 다루는 날짜 함수

날짜 데이터 + 숫자 -> 일수 만큼 증가
날짜 데이터 - 숫자 -> 일수 만큼 감소
날짜 데이터 - 날짜 데이터 -> 날짜 간격 일수
날짜 + 날짜 -> 존재하지 않음

-ADD_MONTHS
-MONTH_BETWEEN
-NEXT_DAY : 다음 요일
-LAST_DAY : 현재 월의 마지막 일
-ROUND, TRUNC

-Y, R, YYYY/YY, RRRR/RR
	YY -> 현재 년도 기준 89 -> 2089
	RR -> 가까운 년도 기준 89 -> 1989

MM, RM : 월

DD : 일

HH24 : 24시간 기준 시
HH, HH12 : 12시간 기준 시
MI : 분
SS : 초
W : 1~5 주 번호


자료형을 변환하는 형 변환 함수
	TO_NUMBER
		자동 형변환 (문자열 숫자 -> 숫자 변환)
		TO_NUMBER("문자열", "숫자 패턴")

	9 -> 패턴, 남는 자리수는 제거
	0 -> 패턴, 남는 자리수는 제거 X, 0으로 채운다

	999,999


	TO_CHAR
	형식화 문자

	날짜 -> 특정 형식
	YYYY/RRRR, YY/RR -> 연도
	MM / RM : 월
	DD : 일

	HH24, HH12, HH -> 시
	MI -> 분
	SS -> 초

	숫자 -> 문자
	9 -> 남는 자리수는 채우지 않고
	0 -> 남는 자리수는 채운다.


	TO_CHAR
		날짜 -> 형식화된 날짜 표기 문자
		-TO_DATE : 형식화된 날짜 문자 -> 날짜

		숫자 -> 형식화된 숫자 표기 수치
		-TO_NUMBER : 형식화된 수치 -> 숫자


NULL 처리 함수
	NULL 연산 X
	NULL + 10 -> NULL
	NULL < 10 -> X

	NVL(컬럼명, NULL일때 대체되는 값)
	SELECT E.*, (SAL * 12 + NVL (COMM, 0)) FROM EMP E;
	


	참고) MySQL IFNULL
	
	NULL인 값을 조회, IS NULL

	NVL2(컬럼명, NULL이 아닐때 반환되는 값, NULL일때 반환되는 값);

상황에 따라 다른 데이터를 반환하는 DECODE 함수와 CASE문


SWITCH ~ CASE


SELECT ENAME, JOB,
		CASE 
			WHEN SAL < 2000 THEN 'LOW'
			END AS "SALLV"
			FROM EMP;


다중행 함수와 데이터 그룹화
	단일행 함수 : 하나의 값 - ROUND, CEIL -> 하나의 값 반올림, 올림
	다중행 함수 : 여러개의 값 -> 하나의 결과 ( 통계 )
		: SUM -> 합계
		: AVG -> 평균
		: COUNT -> 행의 갯수
		: MAX -> 최대값
		: MIN -> 최소값

		SUM은 단일 값이 나오는 함수와 같이 쓸 수 없다 (EX)ENAME 등

		NULL은 처리 X

		([ALL | DISTINCT] 컬럼명, *)

		UNION = 집합 연산자
1.하나의 열에 출력 결과를 담는 다중행 함수
2. 결과 값을 원하는 열로 묶어 출력하는 GROUP BY절
-공통 값으로 묶어서 그룹 -> 통계 함수(집계 함수)
- 그룹지어진 값의 갯수만큼 행이 나온다.
- 유일한 값
- 조건식 (WHERE X, HAVING)
	HAVING 통계 함수(집계 함수) 조건

부서별 + 직책별 통계, 평균(급여가 2000불) 이상인 직원 통계
SELECT DEPTNO, JOB, AVG(SAL) FROM EMP WHERE DEPTNO IN(10, 20)
GROUP BY DEPTNO, JOB HAVING AVG(SAL) > 2000

HAVING은 WHERE앞에



SELECT DEPTNO, JOB, AVG(SAL) 평균, SUM(SAL)합계 FROM EMP GROUP BY DEPTNO, JOB;
그룹 부분들은 묶어서도 가능(DEPTNO, JOB)
GROUP BY 앞에 넣은 항목들만 묶기가능


3. 그룹화와 관련된 여러 함수

ROLLUP
SELECT DEPTNO, JOB, SUM(SAL) 합계, ROUND(AVG(SAL)) 평균, MAX(SAL) 최대, MIN(SAL) 최소 FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB)

CUBE
SELECT DEPTNO, JOB, SUM(SAL) 합계, ROUND(AVG(SAL)) 평균, MAX(SAL) 최대, MIN(SAL) 최소 FROM EMP
GROUP BY CUBE(DEPTNO, JOB)


GROUPING SETS

LISTAGG : 좌로 정렬
SELECT DEPTNO, LISTAGG(ENAME, ',')WITHIN GROUP(ORDER BY ENAME) FROM EMP GROUP BY DEPTNO;

SELECT DEPTNO,
	LISTAGG(ENAME, ',')WITHIN GROUP(ORDER BY ENAME) ENAME
FROM EMP GROUP BY DEPTNO



PIVOT -> 열 -> 행
SELECT * FROM
(SELECT DEPTNO, JOB, SAL FROM EMP)
PIVOT(MAX(SAL) FOR JOB IN('CLERK' AS CLERK,
			'SALESMAN' AS SALESMAN,
			'MANAGER' AS MANAGER,
			'ANALYST' AS ANALYST))
ORDER BY DEPTNO;


UNPIVOT -> 행 -> 열


여러 테이블을 하나의 테이블처럼 사용하는 조인 *

1. 등가 조인 (동등조건)
	공통 값을 가지고 조인

SELECT * FROM EMP E, DEPT D, DEPT_SUB S
	WHERE E.DEPTNO = D.DEPTNO 
	AND D.DEPTNO = S.DEPTNO;
(DEPTNO로 묶인 3개의 테이블을 이음)


2. 비등가 조인
	연결점 X, 비교를 통해서 조인

SELECT * FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

(S.LOSAL 과 S.HISAL 사이의 E.SAL(다른 테이블)값을 이용하여 연결 후 그 사이에 해당되는 데이터 테이블 호출)

3. 자체 조인
	동일 테이블 내에서 조인

4. 외부 조인 (공통된 부분을 보면서, 부가된 정보를 더 보고 싶을때 사용) (왼쪽, 오른쪽 조인)
(+)가 붙은 쪽이 부 테이블
없는 쪽이 주 테이블

-- 직원 테이블 EMP E 가 나오고, 매니저 정보가 있으면 +
SELECT * FROM EMP E, EMP M 
WHERE E.MGR = M.EMPNO(+);

SELECT * FROM DEPT D, DEPT_SUB S
WHERE D.DEPTNO = S.DEPTNO(+);

SQL-99

